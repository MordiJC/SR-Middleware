//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public class LoanRequest implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public Money amount;

    public Period period;

    public Currency foreignCurrency;

    public LoanRequest()
    {
        this.amount = new Money();
        this.period = new Period();
        this.foreignCurrency = Currency.PLN;
    }

    public LoanRequest(Money amount, Period period, Currency foreignCurrency)
    {
        this.amount = amount;
        this.period = period;
        this.foreignCurrency = foreignCurrency;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LoanRequest r = null;
        if(rhs instanceof LoanRequest)
        {
            r = (LoanRequest)rhs;
        }

        if(r != null)
        {
            if(this.amount != r.amount)
            {
                if(this.amount == null || r.amount == null || !this.amount.equals(r.amount))
                {
                    return false;
                }
            }
            if(this.period != r.period)
            {
                if(this.period == null || r.period == null || !this.period.equals(r.period))
                {
                    return false;
                }
            }
            if(this.foreignCurrency != r.foreignCurrency)
            {
                if(this.foreignCurrency == null || r.foreignCurrency == null || !this.foreignCurrency.equals(r.foreignCurrency))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Bank::LoanRequest");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, amount);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, period);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, foreignCurrency);
        return h_;
    }

    public LoanRequest clone()
    {
        LoanRequest c = null;
        try
        {
            c = (LoanRequest)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Money.ice_write(ostr, this.amount);
        Period.ice_write(ostr, this.period);
        Currency.ice_write(ostr, this.foreignCurrency);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.amount = Money.ice_read(istr);
        this.period = Period.ice_read(istr);
        this.foreignCurrency = Currency.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LoanRequest v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LoanRequest ice_read(com.zeroc.Ice.InputStream istr)
    {
        LoanRequest v = new LoanRequest();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LoanRequest> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LoanRequest v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LoanRequest> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LoanRequest.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LoanRequest _nullMarshalValue = new LoanRequest();

    /** @hidden */
    public static final long serialVersionUID = -1511346227012947865L;
}
